콜백 패턴 : 
전략 패턴(인터페이스 구현체들을 불러와 사용)에서 발전. 인터페이스를 구현한 전략들 가져와 클라이언트가 사용자(컨텍스트)에 넘겨주는 방식에서..
클라이언트가 사용자(컨텍스트)에게 익명 내부 클래스를 사용해 인터페이스를 자체적으로 구현해서 넘겨주는것. 고로 구현체들을 미리 만들어 놓을 필요가 없다.
이때 익명 내부 클래스로 넘기는 방법이.. 다른 코드의 인수로써 메서드(클래스)를 넘기는것과 같아 콜백 패턴이라고 부른다.

 -----------------------------------------------------------------------------------------

옵저버 패턴 :
A라는 subject를 보고있을 다수의 observer들을 생성하여.. (observer는 interface를 구현한것으로 한다)
subject에서 자신을 지켜 볼 observer들을 리스트 목록으로 갖고있으며, 스스로 등록한다. 
(강제로 관찰당하진 않는다. 자기가 개인정보제공 동의해줘야함;;;)
이후 subject에서는 자신이 원할때마다 리스트에 있는 observer들에게 업데이트하라고 신호를 보낼 수 있다(for문..)

장점으로는 서비스단위(observer 단위)로 탈부착식이 가능하지만, 어쨋든 subject에서 스스로 등록해줘야 하는 의존성은 갖고있다.

 ----------------------------------------------------------------------------------------- 

발행/구독 패턴 : 

옵저버 패턴의 subject, observer 사이에 Message Queue와 같은 broker가 도입된 패턴.

옵저버 패턴은 subject가 observers에 대한 정보를 갖고있어야 하고 또 직접 변화를 알릴 필요가 있어 결합도가 있다.

하지만 발행/구독 패턴에서 subject(publisher)는 observer(subscriber)가 누군지 몰라도 되고 단지 broker에 메세지를 던져놓기만 하면 된다.

observer는 broker가 할당하는 메세지를 받아 처리하면 됩니다.

개인적으로 broker가 옵저버 패턴의 subject가 되어 

 

subject -> observer 에서 publisher -> broker(subject) -> subscriber(observer)

 

구조로 바뀌었다는 느낌을 받는다.

 

subject와 observer는 서로를 몰라도 되기에 동기에서 비동기적인 방식으로 움직이게 된다.

또한 subject와 observer는 서로를 몰라도 되기에 MOM과 같은 broker에만 접근할 수 있다면 서로 다른 서비스 단위에 존재해도 연계가 가능하다.


 -----------------------------------------------------------------------------------------


iterator pattern : 

각 집합(Aggregate)들을 일일히 for문 돌리는것은 비효율적이고, 비생산적.
 - 집합의 순회 로직이 바뀐다면 해당 클래스의 소스들을 모두 수정해줘야한다.
 - 집합마다 순회 로직을 일일히 적어야 한다. (각각의 Iterator 구현체를 만들수도 있으나, generic class를 활용한다던가, java의 Iterator 기능을 쓸수도 있는 가능성이 줄어든다.)
이에 집합마다 Iterator를 return하는 메소드를 구현한다.

★각 Iterator의 구현체(concreateIterator)는 순회 로직인 hasNext와 next를 구현하고 있으면 된다.
어짜피 다른 메서드는 활용되지도 않는다.

이렇게 되면 concreateIterator의 hasNext와 next를 통한 순회 로직이 바뀐다 하더라도 각 Aggregate 클래스와 해당 집합들의 요소 클래스의 소스는 변하지 않는다.

"디자인 패턴은 클래스의 재이용화를 촉진한다.
재이용화를 촉진하는것은 클래스를 부품처럼 사용할 수 있게 하고,
하나의 부품을 수정해도 다른 부품에 큰 영향 없이 적은 수정만으로 끝낼 수 있다는 것을 의미한다."

라는 클래스 보존의 법칙을 지킬 수 있다.


==> 결론: 순회로직을 클래스에서 분리하여 독립시킬 수 있다. (결합도 약화 가능)