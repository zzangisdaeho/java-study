우리가 패키지 내에서 만드는 클래스는

public class xxx{
}
이다.

이것은 다른 창에서 클래스를 보여줄 뿐이지, 반드시 이렇게 클래스를 만들어야 하는것은 아니다.

예를 들어

패키지에서 클래스 A와 B를 만들면,
우리는 해당 패키지에서 A를 클릭하고, B를 클릭하여 각각 클래스에 접근할 수 있다.
그렇기 때문에 클래스 페이지 자체를 새로 생성해야만 하나의 클래스가 만들어진다고 생각한다.

하지만 클래스 A 페이지 안에 B클래스를 만들수도 있다.

먼저 클래스 A를 만들면

public class A{
}
가 생성될 것이다.

이 뜻은, public이라는 접근제어자로 이루어진 class A라는 뜻이다.

이 페이지 아래 B클래스를 선언하면...

public class A{
}

public class B{
}

위와 같이 나타날 것이고 이러한 방법도 B 클래스를 만든것이다.

다만 좌측의 패키지에는 A라는 클래스만 보인다는것이 다른 점이다.

--------------------------------------------------------------------------------------------------------------

A클래스로 생성한(new) 인스턴스 주소를 가리키는 a, b 참조 변수가 있을시..

a참조 변수를 통한 A인스턴스 데이터값 변화와 b 참조 변수를 통한 A인스턴스 데이터값은 독립적이다(영향이 없다).

A a = new A();
A b = new A();
위와 같이 객체를 두번 호출할 경우
stack에 등록된 a참조 변수는 A 클래스 인스턴스가 등록된 heap의 주소를 가리킨다.
A인스턴스와 연결된 b 참조 변수도 heap 메모리 주소를 가리킨다. 
하지만 각각의 참조변수가 가르키는 heap 주소는 별도이다. (같은 이름의 인스턴스 두개가 각각 heap메모리에 존재한다)
고로 각각의 객체 함수를 통한 인스턴스 활용은 서로 영향을 끼치지 않는다.

Student studentAhn = new Student();

Student 클래스를 생성 -> heap 메모리에 인스턴스 생성 -> studentAhn 라는 변수형이 인스턴스가 저장된 메모리 주소를 가리킴(참조 변수).

studentAhn은 지역변수로, 지역변수이기 때문에 stack메모리에 생성되고, heap에 생성된 
인스턴스를 가리키는 주소를 대입(참조)해 놓은 변수로 활용된다.

heap메모리?
동적 메모리 공간을 말함. 동적으로 할당되나 stack 메모리와 다르게 사용 후 직접 메모리 해제가 필요함.
JAVA에서는 가비지 컬렉터가 자동으로 메모리를 해제해줌
----------------------------------------------------------------------------------------------------------------

객체 : 객체 지향 프로그램의 대상, 생성된 인스턴스
	힙 메모리에 생성된 인스턴스 각각을 가리킴

클래스 : 객체를 프로그래밍하기 위해 코드로 만든 상태
	class A {  } 가 써져 있는 코드 자체를 의미

인스턴스 : 힙 메모리에 장전(?)된 클래스의 상태

맴버 변수 : 클래스의 속성, 특성
	클래스 안의 메서드에 있는 지역변수가 아닌 클래스 광역 변수

메서드 : 클래스 안에 구현된 함수기능
	클래스의 광역 변수(맴버 변수)가 활용 될수도 있고 안될수도 있다.

참조 변수 : 메모리에 생성된 인스턴스를 가리키는 변수
	인스턴스의 heap 메모리 주소값을 가진 변수

참조 값 : 생성된 인스턴스의 메모리 주소 값
	인스턴스의 heap 메모리 주소값 자체를 말함
	참조 변수가 가진 주소값 자체를 말함

----------------------------------종캇 버젼 -------------------------------------------------

클래스 : 틀 혹은 설계도. 붕어빵 찍는 기계 틀

객체 : 클래스로 찍어낸 인스턴스. 붕어빵

인스턴스 : 객체 개념에 포함되는 내용.  메모리에 할당된거긴 한데, 객체의 관계를 나타낼때 쓰는말.

맴버 변수 : 걍 클래스 안에서 사용하는 고정 변수

메서드 : 그냥 함수임. 별거없음 클래스랑 엮어서 설명이 필요없음.