<시험 범위>
변수 연산자 제어문 배열 2차원배열 객체 객체배열 상속 다형성 api exception 

<변수>
가볍게 보세요 
: 데이터를 저장할 수 있는 공간 
: 기본자료형 8개 크기 
: 변수명 규칙 - 낙타봉 표기법 , 예약어 사용 금지 
	1. 대소문가 구분, 길이제한 없음
	2. 예약어 사용 x
	3. 숫자로 시작하면 안됨
	4. 특수문자는 _, $만 허용
	5. 낙타봉표기법

: 변수는 stack에 할당 
: final 상수 
: overflow 
: 형변환 - 강제 , 자동 

<연산자>
: 증감 연산자 -전위(내가 먼저인애 ) , 후위(다른애들 다 하고 후에)
: % 모듈러  
: / double 로 하면 double 값(소숫점까지 나옴)
: 삼항연산자   조건식  ?  결과1 : 결과2
: = 대입  == 같다 
: 문자열끼리 == 은 주소값 비교 
: 값비교는 equals 
: 

<제어문>
: 조건문 연습
: 반복문 연습

<배열>
: 같은 자료형을 여러개의 묶음으로 묶어놓은 것 
: int [] arr = new int [];
: int [][] arr = new int [][];
: for 문 두개 


<객체>
: 클래스를 통해서 new 연산자와 생성자를 통해 heap영역에 올리는 것 
--------- → 도안 
: 필드(public default private protected) , 생성자(객체생성 , 필드 초기화) , 메소드 
: 필드 클래스 영역에 선언된 것
           --------------- 
: 접근제한자 예약어 클래스명 <- 
: 클래스 접근제한자는 public default 만 가능

<생성자>
: 클래스 명과 동일하며 반환값이 아예 없어야 한다 void xxx 
: 일종의 메소드 

<메소드>
: 리턴값 , 매개변수 
: 반환형 : 기본자료형 , 배열 , 클래스 , void 리턴값
: 매개변수 : 없거나 , 기본자료형 , 클래스 , 배열 ,  가변인자 
: public , private , default , protected 

<접근제한자>
: 범위 
:public (다른 패키지에서도 어디서든지 import할 수 있는 것 ) ,
 protected (상속이 되어있을 경우 다른 패키지도 가능, 상속이 없을 때는 같은 패키지에서만 가능 ) ,
 default 같은 패키지에서만
 private 클래스 내부에서만 

: final 종단의 의미 
클래스 메소드 필드 지역변수 
---------   → 상속불가 
         --------   → 오버라이딩 불가능 
                    -----     → 상수 
                            ----------  → 상수


<객체 배열 >
Person[] pArr = new Person[5];
null로 초기화 되어있다 
pArr = new person ();
주소값이 들어감 

<상속 >
클래스와 클래스 간의 관계 
부모클래스 , 자식클래스한테 부모가 가지고 있는 멤버들을 주는 것 
목적 : 멤버의 재사용성 

: extends 예약어로 상속
 
: 오버라이딩이란 ? 부모클래스에 있는 메소드를 자식클래스가 가져가서 재정의 하는 것 

: 부모메소드와 자식메소드 이름이 같아야하구 리턴타입 같아야 하구 매개변수도 같아야합니다 . 

: ★접근제한자 부모메소드보다 더 넓거나 같아야 한다 . 

: ★단, 예외를 오버라이딩 할 시, 부모보다 하위의 예외클래스를 사용해야한다.
(다형성의 논리에 따라 부모클래스가 항상 더 상위의 클래스여야 하기 때문 자손이 상위의 예외 클래스를 넘길 순 없다.)

: 오버로딩  : 같은 메소드를 매개변수를 달리해서 쓸 수 있는 것 
: 같은 이름 리턴타입 상관없고 매개변수 종류 , 순서 , 개수 다르거나   

<다형성>
 : 부모클래스 래퍼런스가 자식으로 부터 파생된 자식객체를 부모 래퍼런스에 받을 수 있게 하는 것 

: 부모가 자식을 받는 걸 upcasting
: 부모로 받아있는 걸 형변환해서 자식으로 바꿔주는 것  downcasting 



<API>
: 래퍼클래스 : 기본자료형을 클래스로 만든것 객체화 시킨것 
: String 을 기본자료형으로 
str = 10 ;  Integer.parseInt(str);
: String에서 기본자료형으로 바꿀 수 없는 것(parseing이 불가능 한 것 ) :  Char , boolean 
: charAt String -> char
: Date, Calendar , Gragori
: Date d = new Date 
: Calendar c = Calendar . getInstance();
: GragorianCalendar g = new GragorianCalendar(~~);

년월일시분초 뽑아내기 
SimpledataFormat sdf = new SimpledataFormmat("yyyy-MM-dd-e요일-E요일 a(오전 오후) hh(12)/HH(24)시 mm분 ss초")

< Exception>
checked  ⇒ 개발자가 무조건 예외처리를 해줘야 하는 것
 
unchecked ⇒ 상관 안해도 되는 애들 
(runtime 아래에 있으면)

checked -> 예외처리 방법 2가지 
throws → 나를 불러준 메소드한테 던져주는 것 위임해주는 것 
try catch → 여기서 해결


throw → 강제 발생 throw new myException 


try (예외가 발생할수있을만한코드 )
catch  (예외 처리 방법 서술 )
finally() (무조건 실행 )

try~with ~resourse 자동적으로 close() 
try(){} 하여 ()안에 close()가 필요한 코딩시 알아서 닫아줌

실습문제 많이 보세요 
상속
가위바위보 문제
과제..?

문제가 왜 발생했는지 원인을 찾아서 원인을 해결해라  x 3

String str =null;
str.charAt(1) ; -> NullPointException 발생
NullPointerException : null인 참조 변수로 객체 맴버 참조 시도시 발생. 객체 사용 전에 변수가 null인지 확인.
str이 null인데 charAt을 호출하겠다고 해서 
str에 값을 넣어주겠다 

코드짜는 건 1문제 

서술형 x 6
코딩 x1 
