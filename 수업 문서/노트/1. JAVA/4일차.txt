스트링끼리의 비교는 .equals라는 메소드를 사용

gender.equals() <--> !gender.equals()

== 는 해당 값의 내용물보단 주소값이 같은지 비교
String 내의 문자 내용물을 비교하려면 .equals()를 써야한다

★★★★★★★문자열의 비교는 .equals()를 사용 (String 클래스에 속한 메소드)

ex) name.equals("박신우") 자체가 true false의 논리값이 된다.
위 코딩의 not 값은  !name.equals("박신우")  이다

ex) if (fruit.equals("사과") || fruit.equals("복숭아") || fruit.equals("키위")) {	
			System.out.println(fruit + " : "+price+"원");
	}
	=> String과 비교할땐 equals()좀 쓰자. 몇번째틀리냐...
-----------------------------------------------------------------------------------------------

char 값에 "" 붙여서 String화 시킬 수 있다.

char값은 4칙연산 계산시 int로 치환하여 계산하나, String 에선
2일차 메모와 같이 문자열 앞의 숫자는 수 취급하고
문자열 뒤의 숫자는 문자 취급한다.

다만 char값 하나만 있을때는 문자로 출력하기에 시작점에 char값 2개가 +로 더해지지 않는다면
문자열 취급하여 String이 될 수 있는것.

ex)
char a = '김';
char b = '대';
String c = a + b + "호";
System.out.println(c);
-> 90432호

char a = '김';
char b = '대';
String c = ""+a + b + "호";
System.out.println(c);
-> 김대호 (앞의 ""로 인해 뒤의것이 모두 문자열처리)
-> 이 방법이 베스트★

char a = '김';
char b = '대';
String c = a + (b + "호");
System.out.println(c);
-> 김대호 ( ()처리로 b+호 는 숫자 + 문자열 이지만, char값으로 하나의 숫자는 '문자'로 처리)

-----------------------------------------------------------------------------------------------

프로그래밍(코딩)은 위에서 아래로 실행될 프로그램을 짜는것이다.
제어문은 이 중 위에서 아래로 실행되는 순서를 돌리거나, 넘기는 등
순서를 제어하는 문법을 말한다.


제어문은 프레임을 외워야 사용 가능하다



조건문 : 조건이 참일 경우 실행하는것 거짓일 시 실행되지 않음

if ~ else : 조건식이 참일 경우 if 수행문 실행, 거짓일 경우 else 수행문 실행
else가 없어도 상관은 없다.

if ~ esle if ~ else : 조건식이 다양해질 경우 else if 로 조건식 추가

★★★위로부터 true 인 조건문이 검색 될 시, 이후 조건은 실행되지 않음.

	하지만 왠만하면, 중복이 되지 않는 if문을 쓸 수 있도록 하는게 좋음.


ex) if 조건식 = num>0 {수행문1}
	else if 조건식 = num>2 {수행문2}
	-> num=5를 넣을 시 수행문1 만 수행됨. 상단에서부터 처음 true인것만 실행하기 때문.


중첩 if 사용 가능



switch : 조건식의 결과가 정수 또는 문자, 문자열일때 사용 가능
	★break; 사용하지 않을 시 해당 case로 부터 마지막 case까지 실행하여 마지막 수행문장이 수행됨.
	처음부터 걸리는 경우가 없을 시 기본값이 그대로 나옴.
	그냥 메소드 자체가 그렇게 만들어져있으니까 break 쓰자. 논리를 따지려면 제작자한테 가야지 뭐;;

