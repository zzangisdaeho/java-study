컴파일에러 : 문법 에러. 코딩 중 빨간줄 뜨는거 (RuntimeException이외 계열 -> checked)

런타임에러 : 실행하면 나는 에러 NullPointerException이 대표적 (RuntimeException계열 -> unchecked)
런타임에러 해결 방법 : 런타임에러는 보통 프로그램 설계 미숙이다. 
	고로 if문으로 거를 수 있는지 확인 후 안된다면 try catch(예외처리)

소스 수정(문법 및 설계)으로 해결 가능한 에러 = exception (컴파일에러, 런타임에러)

exception에도 계층이 존재하고, 모든 exception의 조상은 역시나 Object.(에러도 클래스다) 
그 후손 Throwable. 그 후손 error와 exception.
error는 개발자가 잡을 수 없는 영역
exception 는 개발자가 설계로 잡을 수 있는 영역의 최대조상격.


exception 중 
checked는 exception 해야 하고(안하면 에러남) (빨간줄 뜨는거), 
unchecked(Runtime계열)는 exception 해도 되고 안해도 된다 알아서 흘러가니까.
unchecked는 RuntimeException의 자손들. 나머지는 checked.

RuntimeException 클래스 -> unchecked exception.  빨간줄 안뜸

대표 후손 클래스

1. ArithmeticException : 0으로 나누는 경우 발생. if문으로 나누는 수가 0인지 검사

2. NegativeArraySizeException : 배열크기가 음수일 경우

3. ArrayIndexOutOfBoundsException :  배열 index범위를 넘어서 참조하는 경우

4. ClassCastException : ??? cast연산자 사용 시 타입이 안맞으면 발생하는 오류. 아직 안배움

5. ★ NullPointerException : null인 참조 변수로 객체 맴버 참조 시도시 발생. 객체 사용 전에 변수가 null인지 확인.
			예전에 객체배열에 index에 객체생성 안하고 조회할떄 발생한 오류
			객체 생성하지 않았기에 참조 변수가 null이었고, 그럼에도 조회하려 했기 때문에 발생했다.

1 2, 3, 4, 5 순으로 메서드 실행 중 5까지 가기 전에 에러 발생시, 5가 실행이 안됨.(중간에 에러뜨면서 멈춤)
1,2,3,4,5 로 5 실행 후 4,3,2,1 돌아가는 과정에서 checked에러 발생시 
	자신을 불러온 곳에 에러를 넘기거나(throws) 그자리에서 예외처리(try ~ catch) 하거나 둘 중 하나 선택
	
	'thorws'는 exception을 넘기는 아이. 메서드 선언 후 뒤에 붙여준다.
	ex) public void method2() throws IOException

	'throw'는 exception을 강제로 만들어주는 아이. 메서드 안에서 사용. 에러 만들시 이후 코드는 실행되지 않는다.
	내가 예외를 억지로 발생시킨 경우 그 메소드에서 처리하진 않는다. throws로 넘기는거다.
	만들고 바로 해결할꺼면 웨만듦;
	throw로 exception 발생시킬때 ( )안에 String 값 넣을시 String 매개변수에 의한 생성자로
	해당 문자열이 에러코드 옆에 붙어서 나옴
	ex ) throw new 에러(매개변수 있어도되고 없어도 됨);  ★(에러도 클래스이기 때문에 사용하려면 객체 생성 해줘야함)

	
try : exception이 발생할 가능성이 있는 코드를 안에 기술

catch : exception발생 시 어떻게 처리할지 기술. 여러 exception에 대해 처리방안 기술 가능.
	e.printStackTrace() : 에러 문구와 위치를 프린트 하는메소드.
	e.getMessage() : 에러 문구만 String으로 반환하는 메소드


catch문은 자식클래스부터 부모클래스로 써 나가야 정확하게 캐치하여 처리방안을 만들 수 있다.
부모는 형변환으로 자손클래스 exception들을 다 품기 때문에, 위에서 먼저 캐치해버리면 정확하게 어떤 오류인지 알기 어렵다.
예를들어 엔진에 문제가 있을경우 엔진에 문제가 있다고 출력하라는 catch문을 맨위에 적는다면,
몇번 실린더에서 문제가 있는지 알긴 어렵다.
위쪽에서 1번~4번 실린더에 문제가 있을경우 해당 번호로 출력하도록 먼저 자식클래스를 쓴다면 어떤 오류인지 알기 쉽다.
실린더 이외에 문제일 경우 엔진이란 부모클래스를 사용하면 실린더가 아닐경우 엔진문제라고 출력하기에 정확하게 진단해볼 수 있다.

	
finally : 앞선 코딩에서 에러가 나도 아래 무조건 실행해야 하는 코드가 있을 경우 finally를 넣어준다.
	finally 안에서도 try catch 가능하다.
	finally 안에는 그냥 새롭게 메서드가 실행된다고 봐도 된다.
	앞선 catch에서 return 되더라도 catch가 끝나고 새로운 finally부터 다시 시작한다고 보면 된다.
	고로 finally안에선 try catch 중복이 가능한것이다
	System.exit();를 만나면 무조건 프로그램 종료가 되어 finally이 시작하기전에 꺼진다.

틀
	try{}
	catch(에러명){}
	catch(에러명2){}
	catch(에러명3){}
	finally{}

//오버라이딩 시 throws하는 Exception의 개수와 상관없이 처리 범위가 좁아야 함.
//catch의 논리에 따르면 부모클래스가 받을 수 있는 범위가 더 크기때문에
//후손클래스의 오버라이딩은 부모클래스가 throw하는 exception의 범위보다 좁아야 한다.
//개소리 ㅋ

★다형성의 논리로 접근해야 한다.
상위 클래스가 하위 클래스를 품을 순 있어도 하위 클래스가 상위 클래스를 품을 순 없다. (자식이 부모 상속 불가능)
만약 하위 클래스에서 오버라이딩 시 상위 클래스보다 더 넓은 exception을 보내겠다 하면,
상위 클래스에서 자신이 던질 exception보다 더 큰 exception 클래스를 받게 된다.
이는 자식exception 클래스가 부모 exception클래스를 받는 기형적인 구조가 되기 때문에 문제가 발생한다.
자식이 부모를 형변환하는것은 불가능한데 자식의 exception클래스가 부모의 exception클래스의 상위라면
자식의 exception이 부모의 exception을 업캐스팅하는 앞뒤가 바뀐 모순이 발생하기 때문.
고로 오버라이딩시 exception은 부모클래스보다 하위클래스의 exception으로 작성해야한다.

예외를 만들고 싶으면
★Exception(개발자가 설계로 잡을 수 있는 최상위 클래스)을 ★상속받는 클래스를 만들고,
매개변수 있는 생성자를 만들면 된다. (안만들어도 되긴 한다. 다만 오류메세지 쓰고싶으면 만들어야한다)
