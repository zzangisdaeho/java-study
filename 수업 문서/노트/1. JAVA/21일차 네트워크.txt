네트워크

https://search.naver.com/search.naver?sm=top_hty&fbm=1&ie=utf8&query=2%ED%98%B8%EC%84%A0+%EC%A7%80%EC%97%B0
	-------------- ip
		        -------------- directory
				-------------------------------------------------------------------------------------------------------query



URL : Uniform Resource Location
 서버에 올라가있는 자원에 직접 접근하기 위한 주소

https:// 프로토콜 => 통신 규약

ip 주소 : 서버 주소 
	: 정보 자원을 가진 컴퓨터 위치

port Number : 프로그램에 대한 번호 
	: 접속하는 컴퓨터에서 서버에 할당한 프로그램 번호

directory : 서버가 들어가 있는 위치

query string : db 또는 server에 처리할 값을 query에 담아 전달하는것 : 서버에 보내는 매개변수



서버 :
1. 전용 서버 : 서비스를 제공하기위해 서버를 새로 판 서버와(서버 기반 모델)
 -> 보완과 자원관리가 쉬움, 서비스가 안정적임. 서버 구축과 관리에 대한 비용이 발생
\2. P2P : 클라이언트마다 서버 역할을 제공할것인지 구분 : 전용 서버가 없이 클라이언가 서버 역할도 하는것 P2P(Peer to Peer)방식이라 함
 -> 서버 구축과 관리 비용이 절감. 안정적인 서비스나 자원관리가 힘들고 보안이 취약함P주소
컴퓨터의 아이디 cmd에서 ipconfig명령어로 확인
\\
cmd 명령어 
cd : changedirectory -> 위치 바꿈 혹은 현재 위치 확인.  cd.. -> 뒤로가기 
dir : 현 위치에 있는 폴더의 파일과 디렉터리를 보여줌
path : 환경변수 path의 설정값을 보여줌
cls : 콘솔창 지우개


★포트는 프로그램에 대한 번호, 소켓은 왔다갔다 하는 문


TCP 데이터를 보내고 손실된게 없는지 확인하기 때문에 느리지만 안정적
UDP 는 송신 후 무결성 검사를 하지 않아 빠르지만 안정적이지 못함

서버소켓은 접속시에만 사용하고, 클라이언트소켓은 통신에 사용한다.


서버 프로그래밍

1. 포트번호 생성
2. 포트번호를 넣은 '서버 소켓' 생성 : new SeverSocket(port)
3. 클라이언트 접속 대기
4. 클라라이언트와 상호작용 할 '클라이언트 소켓' 생성 
 : '서버 소켓'에서 accept() -> 기 객체화 한 서버소켓에서 파생되는 기능으로 새로운 객체생성 new 는 불필요
--------------------★ 여기까진 클라이언트에서 소켓 생성시 서버에서 처리됨 ★---------------------------
5. 입출력 스트림 및 보조스트림 생성
 : 입출력 스트림 Input/Output Stream 은 소켓 . getInputStrema, getOuptStream으로 생성 가능 마찬가지로 기존 객체에서 파생되는것으로 new 불필요
6. 스트림을 통한 읽고 쓰기
7. 통신 종료
 : server.close() 및 보조스트림 close()


클라이언트 프로그래밍

1. IP주소와 port번호 를 통한 소켓 생성 : new Socket(ip,prot)
2. 입출력 스트림 및 보조스트림 생성
3. 스트림을 통한 읽고 쓰기
 : 입출력 스트림 Input/Output Stream 은 소켓 . getInputStrema, getOuptStream으로 생성 가능 마찬가지로 기존 객체에서 파생되는것으로 new 불필요
4. 통신 종료
 : socket.close() 및 보조스트림 close()
