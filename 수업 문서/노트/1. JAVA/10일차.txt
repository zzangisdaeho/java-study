
객체(인스턴스) : 클래스에 정의된 내용대로 new 연산자를 통해 메모리(heap)에 생성된 것

		배열은 클래스를 통해서 만든것이 아니기 때문에 객체가 아니다. (단순 메모리 내 공간 확보)

		스캐너는 객체임 new + scanner()가 있으니까


변수 : 데이터를 한 개 저장할 수 있는 공간

배열 : 같은 자료형에 변수를 여러개 묶어놓은 것

구조체 :  다양한 자료형의 다양한 갯수 집합을 말한다. 자바에선 클래스이다.

구조체를 외부에서 접근 할 수 없게끔 막아놓은것이(캡슐화) 클래스이다.

캡슐화로 인해 외부에서의 접근이 차단되지만 관리차원의 접근도 차단된다.

이러한 문제를 해결하기 위해 캡슐 안에 기능을 포함시킨다. (메소드)

유연성을 확보하기 위해 일반적인 공통점만을 추출(추상화) 하여 정의된 개념을 클래스에 넣는다.

클래스를 객체(인스턴스)로 만드는 과정을 인스턴스화 라고 한다.



배열은 같은 자료형으로 각각 메모리 크기가 같아 칸의 크기가 동일,

인스턴스는 자료형이 다양하여 각각 데이터의 메모리 크기가 같거나 다르다.




Student s = new Student();


Student : 참조 자료형의 주소값을 넣을 수 있도록 선언한 자료형

s : 참조 변수(heap 주소값을 갖기 때문) 레퍼런스 변수

new : heap에 영역 생성을 가능하게 하는 연산자

Student(); : heap에 어떤 클래스를 생성할 것인지 정의하는 생성자




객체 지향 3대 특징

1. 캡슐화

2. 상속

3. 다형성 : Student 클래스를 Student 자료형을 받지 않는 현상

(4. 추상화)


모든 클래스는 참조 자료형이 될 수 있다.


과제 보는법

다이어그램 상단 = 클래스명

속의 내용 = 전역변수, 필드, 맴버 필드, 맴버 변수

자료형 : 뒤, 변수명 : 앞,  더 앞 : 접근제한자 ( - : private, + : public)


접근제한자 

private = 같은 클래스 안에서만 접근 가능
	같은 클래스에 public메소드(기능, 함수)를 집어 넣어 맴버변수에 접근할 수 있도록 한다.

(default) = 같은 패키지 안에서만 접근 가능 (디폴트값이니 안쓰는게 약속)

protected = 같은 패키지 및 상속 클래스에서만 접근 가능

public = 아무나 접근 가능




함수 = 기능 = 메소드 () 있는것


------클래스 틀---------

클래스 선언	: public (예약어) class Member{}

필드 선언		: private (예약어) String name;

생성자 생성	: public Member(){}

메소드 선언	: public voide method(){}




import : 나 외의 다른 폴더(패키지)에 있는 외부 클래스를 불러올때 위치를 지정해주는것

	improt java.util.Scanner;
	Scanner sc = new Scanner(System.in);
	=
	java.util.Scanner sc = new java.util.Scanner(System.in);


	★java.lang 패키지의 클래스는 import하지 않고도 사용 가능


* : 아스트로. 모든것이라는 의미. 해당 폴더 안에 있는 클래스들을 import할때 쓴다
참고 ) java 폴더 안에는 서브 패키지만 있어서 import java.*; 을 해봐야 들어오는 클래스는 1도 없다 (해당 폴더 안에 class만 가져옴 하위폴더는 불가)

소스파일 : 클래스 열면 나오는 보드?


