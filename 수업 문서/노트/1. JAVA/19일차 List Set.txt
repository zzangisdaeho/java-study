★★★★★★★★★★★★★★컬렉션 : 개중요★★★★★★★★★★★★★★★

여러 타입의 데이터 저장이 가능한데, 변환하는게 귀찮아서 여러 컬렉션을 만들어서 각 컬렉션의 타입을 지정한다.

List와 Set의 차이 : List는 인덱스가 있는 배열과 같고, Set은 인덱스가 없는 구슬주머니같은 묶음이다

Map은 dic같은것이다 순서 유지가 안된다. 인덱스로 찾는게 아니라 key값으로 찾기 때문이다


List
List에서 length와 같은것은 size라고 쓴다
ArrayList를 가장 많이 쓴다.

Set
HashSet을 가장 많이 쓴다.
동일 객체 : 주소값이 같은 명의 객체
동등 객체 : 안에 값이 같은 객체
equals 는 두 객체의 내용이 같은지, 동등성(equality) 를 비교하는 연산자
hashCode 는 두 객체가 같은 객체인지, 동일성(identity) 를 비교하는 연산자
hashCode  는 동일한 객체에 대해 동일한 값을 생성해야합니다. 고로 equals 를 재정의  하면 hashCode 를 재정의  해야합니다 

List는 index가 있어서 내부 요소에 접근이 가능했으나 Set은 index가 없기 때문에 Iterator라는 인터페이스를 사용해서 접근한다.
ListIterator 은 List에서만 쓸 수 있다.


TreeSet : 이진 트리(다리가 두개인 나무)를 기반으로 나 를 기준으로 작으면 왼쪽, 크면 오른쪽으로 보냄. -> 정렬이 자동으로됨.

----------------------------------------------------------------------------------------------------------

<E> : 제네릭이라 부름
e = element = the type of elements in this list
제네릭에는 클래스만 써야 한다.

1. 명시한 한 가지 타입의 객체만 저장하도록 설정함으로써 저장 시 다른 타입이 저장되지 못하도록 함
컬렉션에서 저장된 객체를 꺼내 사용할 때, 객체의 종류에 따라 매번 타입을 확인하고 형변환하는 절차를 없엘 수 있음.

2. 컬렉션, 람다식, 스트림, NIO에서 많이 쓰임

----------------------------------------------------------------------------------------------------------


List 주요 메서드

1. add(E e) : 리스트 끝에 데이터 e 추가. append삘
2. add(int index, E e) : index번째 인덱스에 E 추가
	ex) list.add(3, new Student("강건강", 40));
3. remove(int index) : 해당 index번째 객체 삭제
4. remove(Object o) : 해당 Object 객체 삭제
	ex) list.remove(new Student("강건강", 40));
5. Collections.sort(list); : list객체의 클래스틀 안에 있는 정렬방식 에 따른 정렬
			(implements Comparable 로 인한 compareTo 오버라이딩)
6. list.sort(new StudentComparator()); : implements Comparator 이 적용된 클래스의 내용대로 정렬
7. set(int index, E e) : index번째 인덱스에 있는 요소를 e로 수정
8. get(int index) : index번째 인덱스에 있는 요소 가지고 옴(Object 반환)
9. subList(int index1, int index2) : index1 번째 인덱스부터 index2 번째 인덱스까지의 리스트 반환
10. contain(Object o) : o가 리스트에 존재한다면 true 반환
11. indexOf(Object o) : o가 리스트에 위치하는 인덱스 번호 반환, 존재하지 않으면 -1 반환
12. List.addAll(set) : set에 넣은 객체들을 모두 list에 넣어주기

Set 주요 메서드 (대부분 List의 메서드 중 index매개변수가를 제거하여 사용. 여기선 편의상 추가되는 메서드만)

Iterator(커서를 생각하면 편함) 주요 메서드
1. .hasNext() : 다음에 데이터가 있다면 true 반환. 없으면 false.
2. .next() : Iterator 커서위치에서 오른쪽에 있는 데이터를 반환 후 커서를 한칸 오른쪽으로 옮김


★★★비교하는 기능들을 사용할 때, 2가지만 비교하는걸 넣어주면(기준과 대상) 나머지는
컬렉션 내부의 코딩과 기능들을 통해 알아서 compareTo에 여러 대상들을 넣어서 돌려가며
 요소들끼리 비교하여 정렬하게 된다. 깊이 생각하지 말자.
...어짜피 봐도 모른다..

"누가 더 큰지 알려줘! 정렬은 내가 할게!" 란다!!!!

1. 클래스 내부에서 비교하는 기능 추가 (한가지만 가능)
	implements Comparable

	@Override
	public int compareTo(Object o) {
		String other = ((Dog)o).getName();
		return name.compareTo(other);
	}

-> String클래스 내에도 compareTo가 오버라이딩되어있기 때문에, 가져다 쓰면된다.


2. 클래스 외부에서 비교하는 기능 추가 (여러가지 가능)
	
	implements Comparator {

	@Override
	public int compare(Object o1, Object o2) {
		
		double standard = ((Dog)o1).getWeight();
		double object = ((Dog)o2).getWeight();
		
		String sName = ((Dog)o1).getName();
		String oName = ((Dog)o2).getName();
		
		if(standard > object) {
			return 1;
		}
		else if (standard == object) {
			return sName.compareTo(oName);
		}
		else{
			return -1;
		}


3. equals 오버라이딩. (hashcode도 같이해주는게 관례)

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime*result + ((name == null)? 0 : name.hashCode());
		result = prime*result + (int)weight;
		
		return result;
	}
	
	@Override
	public boolean equals(Object obj) {
		if(this == obj) {
			return true;
		}
		if(obj == null) {
			return false;
		}
		if(getClass() != obj.getClass()) {
			return false;
		}
		
		Dog other = (Dog)obj;
		if(name == null) {
			if(other.name != null) {
				return false;
			}
		}
		else if(!name.equals(other.name)) {
			return false;
		}
		if (weight != other.weight) {
			return false;
		}
		return true;
	}

		