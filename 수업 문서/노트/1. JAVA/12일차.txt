반환 '값'이 없는건 void (마지막 코딩에 return; 이 숨겨져있다)

반환 '형'이 없는건 생성자



메소드 예약어

static static : 영역에 할당하여 객체 생성 없이 사용

final : 종단의 의미, 상속 시 오버라이딩 불가능

abstract : 미완성된, 상속하여 오버라이딩으로 완성시켜 사용해야 함

synchronized : 동기화 처리, 공유 자원에 한 개의 스레드만 접근 가능함

static final : static과 final의 의미를 둘



메소드 반환형

void : 반환형이 없음을 의미, 반환 값이 없을 경우 반드시 작성

기본 자료형 : 연산 수행 후 반환 값이 기본 자료형일 경우 사용

배열: 연산 수행후 반환 값이 배열인 경우 배열의 ★주소값이 반환

	public int[] test(){
		int[] arr = {1, 2, 3};
		return arr;
	}
	=> arr 자채가 배열의 참조변수
	int[] 자료형을 넘겨야 하는데 int[] 자료형으로 선언한 변수가 arr이기 때문에 arr을 보냄

	public void test2(){
		int[] array = test1();
	}
	=> int[] array = arr;

클래스: 연산 수행후 반환 값이 해당 클래스 타입의 객체일 경우 해당 객체의 ★주소값이 반환 (클래스 == 타입)




메소드 매개변수

( ) : 매개변수가 없는 것을 의미

기본 자료형 : 기본형 매개변수 사용 시 값을 복사하여 전달 매개변수 값을 변경하여도 본래 값은 변경되지 않음

배열 ,클래스 : 배열, 클래스 등 참조형을 매개변수로 전달 시에는 데이터의 주소 값을 전달하기 때문에 매개변수를 수정하면 본래의 데이터가 수정됨(얕은 복사)

가변인자 : 매개변수의 개수를 유동적으로 설정하는 방법으로 가변 매개변수 외 다른 매개변수가 있으면 가변 매개변수를 마지막에 설정
	* 방법 : (자료형 ... 변수명)
	* 매개변수의 수에 제한이 없다.



매소드는 항상 마지막에 return하여 자기를 호출한 곳으로 돌아감. (stack구조 이기 때문에)


getter, setter 약속
	메소드명 정할때 set필드명 or get필드명 으로 해야 한다.

	반환값을 가져갈때 호출한 곳으로 간다
	ex ) st.method3()으로 Student 클래스의 메소드 3을 실행할 시
		st.method3()까지가 호출한 곳이다 (매개변수도 주소이기 때문에 st도 포함된다)



static과 관련된 기능들은 똑같이 static으로 선언해줘야 공유할때 편하다!!

remind) static 관련 함수와 변수는 메모리에 리로드 되어 있기 때문에 객체생성 하지 말고
	Class.static 으로 들어간다
	참고로 외부 패키지일 경우 import되어있는 주소에 관련하여 존재하는 static만 접근 가능하다

remind) static 함수는 지역변수인 funtion 안에 선언하면 안된다.

